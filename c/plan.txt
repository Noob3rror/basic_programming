- [ ] Return values (return type and reference)
- [ ] The main( ) function
- [ ] The return statement
- [ ] Header files
- [ ] Keywords (static and extern)
- [ ] Pointers
- [ ] An array
- [ ] C preprocessor
- [ ] Casting
- [ ] Control flow
- [ ] Endianness
- [ ] Multi-byte vs. Unicode character sets
- [ ] Multi-threading
- [ ] Hashing
- [ ] Macro guards
- [ ] Data types
- [ ] Functions and procedures
- [ ] Parameters
- [ ] Scope

- [ ] Dynamically allocated memory
- [ ] Statically allocated memory
- [ ] In the context of automatic vs dynamic allocation, explain how those concepts are related to the implementation of a stack and heap in a C program
- [ ] Memory map of a Linux process
- [ ] Automatically allocated memory

-- data types
-- stdint.h

// Forward declaration.
// Single dimensional array.
// Mult-dimensional array
//Print out the contents of any sized array.
/// @brief Print out the contents of any sized array.
/// @param array Pointer to the array.
/// @param total_elements The total number of elements in the array. 

//arithmatic
//pre / post inc and dec ++x x++

// args char** argv char* argv[]

//A function pointer
//A function that modifies an output parameter through a pointer
//Proper declaration for created functions
//A function that returns a value using a return statement
//A function that receives input from a user
//A function that does not return a value (i.e ., is declared void)
//A function that is passed an argument by value
//A function that takes a pointer argument
//A recursive function

//data validation 6.10

6.11
//Declaring an integer pointer
//Assigning a value to a pointer
//Make effective use of pointer arithmetic to traverse an array
// - [ ] Printing the address of the variable
//Dereferencing a variable to get its value
 //Make use of a function pointer to call another function

  //do while loop
  //while loop
  //for loop
  //if statement
  //switch statement
  //if/else statement
  //effective use of goto labels to construct a single exit point within a function

  //sorting 6.13

  bitwise
  - [ ] or (|)
- [ ] xor (^)
- [ ] bitwise complement (~) 
- [ ] and (&)
- [ ] shift left (<<)
- [ ] shift right (>>)
- [ ] Add, removing, and testing for single-bit flags
- [ ] Extracting arbitrary bytes from multi-byte data types

- [ ] Circularly linked list
- [ ] Hash table
- [ ] Weighted graph
- [ ] Common pitfalls when using linked lists, trees, and graphs
- [ ] The effect of First In First Out (FIFO) and Last In First Out (LIFO)
- [ ] Stack
- [ ] Tree vs Binary search tree
- [ ] Linked list
- [ ] Double linked list
- [ ] Queue vs Priority Queue

- [ ] Portable Executable (PE)
- [ ] Executable and Linkable Format (ELF)
- [ ] Difference between PE and ELF
- [ ] Difference between a library (shared object / DLL) and a regular executable program
- [ ] Calling convention/Application Binary Interface (ABI)

- [ ] thread safe
- [ ] thread id
- [ ] Locking (mutex, semaphore, etc)
- [ ] Threading (thread vs pthread)
- [ ] fork
- [ ] join
- [ ] create
- [ ] exit
- [ ] detach
- [ ] self
- [ ] Race conditions
- [ ] conditional variables
- [ ] Deadlocks
- [ ] atomics
- [ ] Scheduling algorithms, i.e ., round robin, shortest job first, priority scheduling, etc.

- [ ] Transmission Control Protocol (TCP) / User Datagram Protocol (UDP)
- [ ] Open Systems Interconnect (OSI) model
- [ ] POSIX API/BSD sockets
- [ ] Purpose and use of sockets
- [ ] Request For Comments (RFCs)
- [ ] Purpose of subnetting

- [x] Read data from a file
- [x] Write data to a file
- [x] Modify data in a file
- [x] Close an open file
- [x] Print file information to the console
- [x] Create a new file
- [x] Append data to an existing file
- [x] Delete a file
- [x] Determine the size of a file (in a UNIX-based operating system)
- [x] Determine location within a file
- [x] Insert data into an existing file
- [x] Open an existing file

6.16
- [ ] Execute a program in a debugger to perform general debugging actions
- [ ] Create a program using the compilation and linking process
- [ ] Compile position-independent code using a cross-compiler

6.17

preprocessor

env variables

- [x] With attention given to implementation defined behavior, compare and contrast standard memory allocation functions (e.g ., malloc () calloc(), realloc ( ), and free ())
- [x] Demonstrate appropriate error checking when managing memory allocations
- [x] Describe programming techniques that reduce the occurrence of memory leaks (e.g ., behaviors that reinforce a clear ownership model)
- [x] Demonstrate effective use of Valgrind with --leak-check=full to identify memory leaks
- [x] Given code samples, identify and remove memory leaks

- [x] Removing selected items from the circularly linked list
- [x] Creating a circularly linked list with n number of items
- [x] Navigating through a circularly linked list
- [x] Finding the first occurrence of an item in a circularly linked list
- [x] Sorting the circularly linked list alphanumerically using a function pointer
- [x] Destroying a circularly linked list
- [x] Inserting an item into a specific location in a circularly linked list
- [x] Removing all items from the circularly linked list

10.3
- [ ] Signal handling
- [ ] Interrupts

- [x] Threads
- [x] Locks
- [x] Condition variables
- [x] Atomics
- [x] Thread Pool (with graceful shutdown without memory leaks)

11.2
- [x] Formatting string vulnerabilities
- [x] Safe buffer size allocation
- [x] Input sanitization
- [x] Input validation
- [x] Establish a secure communications channel using an SSL library
    *** see ssl_example.py
- [x] Securely zeroing-out memory (compiler optimizations)

- [ ] struct sockaddr_un
- [ ] struct sockaddr_storage
- [12.8] socket()
- [x] gethostname()
- [12.8] send()
- [12.8] recv()
- [x] sendto()
- [x] recvfrom()
- [12.8] bind()
- [12.8] connect()
- [12.8] accept()
- [x] getsockopt()
- [x] setsockopt()
- [x] getaddrinfo()
- [12.8] struct sockaddr
- [12.8] struct sockaddr_in

12.8 Demonstrate skill in handling partial send()/recv()

12.10
// Open the files in read only non-blocking for use in select().
// Use built-in macros to set the file descriptors.
// Used to determine the range for select().
 // Set the time out values for select().
 // Perform the select
 // Print the files with where is set is true.

14.2 regex

18.4 cross compiler

